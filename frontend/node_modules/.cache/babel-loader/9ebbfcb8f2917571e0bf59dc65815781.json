{"ast":null,"code":"/**\n * Returns a `Buffer` instance from the given data URI `uri`.\n *\n * @param {String} uri Data URI to turn into a Buffer instance\n * @returns {Buffer} Buffer instance from Data URI\n * @api public\n */\nexport function dataUriToBuffer(uri) {\n  if (!/^data:/i.test(uri)) {\n    throw new TypeError('`uri` does not appear to be a Data URI (must begin with \"data:\")');\n  } // strip newlines\n\n\n  uri = uri.replace(/\\r?\\n/g, ''); // split the URI up into the \"metadata\" and the \"data\" portions\n\n  const firstComma = uri.indexOf(',');\n\n  if (firstComma === -1 || firstComma <= 4) {\n    throw new TypeError('malformed data: URI');\n  } // remove the \"data:\" scheme and parse the metadata\n\n\n  const meta = uri.substring(5, firstComma).split(';');\n  let charset = '';\n  let base64 = false;\n  const type = meta[0] || 'text/plain';\n  let typeFull = type;\n\n  for (let i = 1; i < meta.length; i++) {\n    if (meta[i] === 'base64') {\n      base64 = true;\n    } else {\n      typeFull += `;${meta[i]}`;\n\n      if (meta[i].indexOf('charset=') === 0) {\n        charset = meta[i].substring(8);\n      }\n    }\n  } // defaults to US-ASCII only if type is not provided\n\n\n  if (!meta[0] && !charset.length) {\n    typeFull += ';charset=US-ASCII';\n    charset = 'US-ASCII';\n  } // get the encoded data portion and decode URI-encoded chars\n\n\n  const encoding = base64 ? 'base64' : 'ascii';\n  const data = unescape(uri.substring(firstComma + 1));\n  const buffer = Buffer.from(data, encoding); // set `.type` and `.typeFull` properties to MIME type\n\n  buffer.type = type;\n  buffer.typeFull = typeFull; // set the `.charset` property\n\n  buffer.charset = charset;\n  return buffer;\n}\nexport default dataUriToBuffer;","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"AAMA;;;;;;AAMG;AACH,OAAM,SAAU,eAAV,CAA0B,GAA1B,EAAqC;AAC1C,MAAI,CAAC,UAAU,IAAV,CAAe,GAAf,CAAL,EAA0B;AACzB,UAAM,IAAI,SAAJ,CACL,kEADK,CAAN;AAGA,GALyC,CAO1C;;;AACA,EAAA,GAAG,GAAG,GAAG,CAAC,OAAJ,CAAY,QAAZ,EAAsB,EAAtB,CAAN,CAR0C,CAU1C;;AACA,QAAM,UAAU,GAAG,GAAG,CAAC,OAAJ,CAAY,GAAZ,CAAnB;;AACA,MAAI,UAAU,KAAK,CAAC,CAAhB,IAAqB,UAAU,IAAI,CAAvC,EAA0C;AACzC,UAAM,IAAI,SAAJ,CAAc,qBAAd,CAAN;AACA,GAdyC,CAgB1C;;;AACA,QAAM,IAAI,GAAG,GAAG,CAAC,SAAJ,CAAc,CAAd,EAAiB,UAAjB,EAA6B,KAA7B,CAAmC,GAAnC,CAAb;AAEA,MAAI,OAAO,GAAG,EAAd;AACA,MAAI,MAAM,GAAG,KAAb;AACA,QAAM,IAAI,GAAG,IAAI,CAAC,CAAD,CAAJ,IAAW,YAAxB;AACA,MAAI,QAAQ,GAAG,IAAf;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,IAAI,CAAC,MAAzB,EAAiC,CAAC,EAAlC,EAAsC;AACrC,QAAI,IAAI,CAAC,CAAD,CAAJ,KAAY,QAAhB,EAA0B;AACzB,MAAA,MAAM,GAAG,IAAT;AACA,KAFD,MAEO;AACN,MAAA,QAAQ,IAAI,IAAM,IAAI,CAAC,CAAD,CAAG,EAAzB;;AACA,UAAI,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAAR,CAAgB,UAAhB,MAAgC,CAApC,EAAuC;AACtC,QAAA,OAAO,GAAG,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,CAAkB,CAAlB,CAAV;AACA;AACD;AACD,GAhCyC,CAiC1C;;;AACA,MAAI,CAAC,IAAI,CAAC,CAAD,CAAL,IAAY,CAAC,OAAO,CAAC,MAAzB,EAAiC;AAChC,IAAA,QAAQ,IAAI,mBAAZ;AACA,IAAA,OAAO,GAAG,UAAV;AACA,GArCyC,CAuC1C;;;AACA,QAAM,QAAQ,GAAG,MAAM,GAAG,QAAH,GAAc,OAArC;AACA,QAAM,IAAI,GAAG,QAAQ,CAAC,GAAG,CAAC,SAAJ,CAAc,UAAU,GAAG,CAA3B,CAAD,CAArB;AACA,QAAM,MAAM,GAAG,MAAM,CAAC,IAAP,CAAY,IAAZ,EAAkB,QAAlB,CAAf,CA1C0C,CA4C1C;;AACA,EAAA,MAAM,CAAC,IAAP,GAAc,IAAd;AACA,EAAA,MAAM,CAAC,QAAP,GAAkB,QAAlB,CA9C0C,CAgD1C;;AACA,EAAA,MAAM,CAAC,OAAP,GAAiB,OAAjB;AAEA,SAAO,MAAP;AACA;AAED,eAAe,eAAf","sourceRoot":"","sourcesContent":["/**\n * Returns a `Buffer` instance from the given data URI `uri`.\n *\n * @param {String} uri Data URI to turn into a Buffer instance\n * @returns {Buffer} Buffer instance from Data URI\n * @api public\n */\nexport function dataUriToBuffer(uri) {\n    if (!/^data:/i.test(uri)) {\n        throw new TypeError('`uri` does not appear to be a Data URI (must begin with \"data:\")');\n    }\n    // strip newlines\n    uri = uri.replace(/\\r?\\n/g, '');\n    // split the URI up into the \"metadata\" and the \"data\" portions\n    const firstComma = uri.indexOf(',');\n    if (firstComma === -1 || firstComma <= 4) {\n        throw new TypeError('malformed data: URI');\n    }\n    // remove the \"data:\" scheme and parse the metadata\n    const meta = uri.substring(5, firstComma).split(';');\n    let charset = '';\n    let base64 = false;\n    const type = meta[0] || 'text/plain';\n    let typeFull = type;\n    for (let i = 1; i < meta.length; i++) {\n        if (meta[i] === 'base64') {\n            base64 = true;\n        }\n        else {\n            typeFull += `;${meta[i]}`;\n            if (meta[i].indexOf('charset=') === 0) {\n                charset = meta[i].substring(8);\n            }\n        }\n    }\n    // defaults to US-ASCII only if type is not provided\n    if (!meta[0] && !charset.length) {\n        typeFull += ';charset=US-ASCII';\n        charset = 'US-ASCII';\n    }\n    // get the encoded data portion and decode URI-encoded chars\n    const encoding = base64 ? 'base64' : 'ascii';\n    const data = unescape(uri.substring(firstComma + 1));\n    const buffer = Buffer.from(data, encoding);\n    // set `.type` and `.typeFull` properties to MIME type\n    buffer.type = type;\n    buffer.typeFull = typeFull;\n    // set the `.charset` property\n    buffer.charset = charset;\n    return buffer;\n}\nexport default dataUriToBuffer;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}