{"ast":null,"code":"import { statSync, createReadStream, promises as fs } from 'node:fs';\nimport { basename } from 'node:path';\nimport DOMException from 'node-domexception';\nimport File from './file.js';\nimport Blob from './index.js';\nconst {\n  stat\n} = fs;\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n */\n\nconst blobFromSync = (path, type) => fromBlob(statSync(path), path, type);\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n * @returns {Promise<Blob>}\n */\n\n\nconst blobFrom = (path, type) => stat(path).then(stat => fromBlob(stat, path, type));\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n * @returns {Promise<File>}\n */\n\n\nconst fileFrom = (path, type) => stat(path).then(stat => fromFile(stat, path, type));\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n */\n\n\nconst fileFromSync = (path, type) => fromFile(statSync(path), path, type); // @ts-ignore\n\n\nconst fromBlob = function (stat, path) {\n  let type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  return new Blob([new BlobDataItem({\n    path,\n    size: stat.size,\n    lastModified: stat.mtimeMs,\n    start: 0\n  })], {\n    type\n  });\n}; // @ts-ignore\n\n\nconst fromFile = function (stat, path) {\n  let type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  return new File([new BlobDataItem({\n    path,\n    size: stat.size,\n    lastModified: stat.mtimeMs,\n    start: 0\n  })], basename(path), {\n    type,\n    lastModified: stat.mtimeMs\n  });\n};\n/**\n * This is a blob backed up by a file on the disk\n * with minium requirement. Its wrapped around a Blob as a blobPart\n * so you have no direct access to this.\n *\n * @private\n */\n\n\nclass BlobDataItem {\n  #path;\n  #start;\n\n  constructor(options) {\n    this.#path = options.path;\n    this.#start = options.start;\n    this.size = options.size;\n    this.lastModified = options.lastModified;\n    this.originalSize = options.originalSize === undefined ? options.size : options.originalSize;\n  }\n  /**\n   * Slicing arguments is first validated and formatted\n   * to not be out of range by Blob.prototype.slice\n   */\n\n\n  slice(start, end) {\n    return new BlobDataItem({\n      path: this.#path,\n      lastModified: this.lastModified,\n      originalSize: this.originalSize,\n      size: end - start,\n      start: this.#start + start\n    });\n  }\n\n  async *stream() {\n    const {\n      mtimeMs,\n      size\n    } = await stat(this.#path);\n\n    if (mtimeMs > this.lastModified || this.originalSize !== size) {\n      throw new DOMException('The requested file could not be read, typically due to permission problems that have occurred after a reference to a file was acquired.', 'NotReadableError');\n    }\n\n    yield* createReadStream(this.#path, {\n      start: this.#start,\n      end: this.#start + this.size - 1\n    });\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Blob';\n  }\n\n}\n\nexport default blobFromSync;\nexport { File, Blob, blobFrom, blobFromSync, fileFrom, fileFromSync };","map":{"version":3,"sources":["/home/makerspace/mks_users_home/wind/22-wind/frontend/node_modules/fetch-blob/from.js"],"names":["statSync","createReadStream","promises","fs","basename","DOMException","File","Blob","stat","blobFromSync","path","type","fromBlob","blobFrom","then","fileFrom","fromFile","fileFromSync","BlobDataItem","size","lastModified","mtimeMs","start","constructor","options","originalSize","undefined","slice","end","stream","Symbol","toStringTag"],"mappings":"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","sourcesContent":["import { statSync, createReadStream, promises as fs } from 'node:fs'\nimport { basename } from 'node:path'\nimport DOMException from 'node-domexception'\n\nimport File from './file.js'\nimport Blob from './index.js'\n\nconst { stat } = fs\n\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n */\nconst blobFromSync = (path, type) => fromBlob(statSync(path), path, type)\n\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n * @returns {Promise<Blob>}\n */\nconst blobFrom = (path, type) => stat(path).then(stat => fromBlob(stat, path, type))\n\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n * @returns {Promise<File>}\n */\nconst fileFrom = (path, type) => stat(path).then(stat => fromFile(stat, path, type))\n\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n */\nconst fileFromSync = (path, type) => fromFile(statSync(path), path, type)\n\n// @ts-ignore\nconst fromBlob = (stat, path, type = '') => new Blob([new BlobDataItem({\n  path,\n  size: stat.size,\n  lastModified: stat.mtimeMs,\n  start: 0\n})], { type })\n\n// @ts-ignore\nconst fromFile = (stat, path, type = '') => new File([new BlobDataItem({\n  path,\n  size: stat.size,\n  lastModified: stat.mtimeMs,\n  start: 0\n})], basename(path), { type, lastModified: stat.mtimeMs })\n\n/**\n * This is a blob backed up by a file on the disk\n * with minium requirement. Its wrapped around a Blob as a blobPart\n * so you have no direct access to this.\n *\n * @private\n */\nclass BlobDataItem {\n  #path\n  #start\n\n  constructor (options) {\n    this.#path = options.path\n    this.#start = options.start\n    this.size = options.size\n    this.lastModified = options.lastModified\n    this.originalSize = options.originalSize === undefined\n      ? options.size\n      : options.originalSize\n  }\n\n  /**\n   * Slicing arguments is first validated and formatted\n   * to not be out of range by Blob.prototype.slice\n   */\n  slice (start, end) {\n    return new BlobDataItem({\n      path: this.#path,\n      lastModified: this.lastModified,\n      originalSize: this.originalSize,\n      size: end - start,\n      start: this.#start + start\n    })\n  }\n\n  async * stream () {\n    const { mtimeMs, size } = await stat(this.#path)\n\n    if (mtimeMs > this.lastModified || this.originalSize !== size) {\n      throw new DOMException('The requested file could not be read, typically due to permission problems that have occurred after a reference to a file was acquired.', 'NotReadableError')\n    }\n\n    yield * createReadStream(this.#path, {\n      start: this.#start,\n      end: this.#start + this.size - 1\n    })\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'Blob'\n  }\n}\n\nexport default blobFromSync\nexport { File, Blob, blobFrom, blobFromSync, fileFrom, fileFromSync }\n"]},"metadata":{},"sourceType":"module"}